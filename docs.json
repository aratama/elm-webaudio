[{"name":"WebAudio","comment":" elm-webaudio provides methods to play audio in Elm.\n\n\n# Types\n\n@docs AudioBufferUrl\n\n@docs AudioGraph\n\n@docs AudioNode\n\n@docs AudioNodeId\n\n@docs AudioNodeProps\n\n@docs AudioOutput\n\n@docs AudioParam\n\n@docs AudioParamMethod\n\n@docs AudioTime\n\n@docs DynamicsCompressorProps\n\n@docs Float32Array\n\n@docs Oversample\n\n\n# Rendering\n\n@docs toHtml\n\n\n# Utility\n\n@docs output\n\n@docs dynamicsCompressor\n\n@docs dynamicsCompressorDefaults\n\n","unions":[{"name":"AudioBufferUrl","comment":" URL for an audio buffer. Elm can't deal AudioBuffer objects directly\nand Just a string as URL instead of AudioBuffer object.\n","args":[],"cases":[["AudioBufferUrl",["String.String"]]]},{"name":"AudioNodeId","comment":" Unique identifier of audio nodes in the audio graph.\n","args":[],"cases":[["AudioNodeId",["String.String"]]]},{"name":"AudioNodeProps","comment":" ","args":[],"cases":[["Analyser",["{ fftSize : Basics.Int, minDecibels : Basics.Float, maxDecibels : Basics.Float, smoothingTimeConstant : Basics.Float }"]],["BufferSource",["{ buffer : WebAudio.AudioBufferUrl, startTime : WebAudio.AudioTime, stopTime : Maybe.Maybe WebAudio.AudioTime, detune : Basics.Int }"]],["BiquadFilter",["{ type_ : WebAudio.BiquadFilterType, frequency : WebAudio.AudioParam, detune : WebAudio.AudioParam, q : WebAudio.AudioParam }"]],["ChannelMerger",[]],["ChannelSplitter",[]],["Convolver",["{ buffer : WebAudio.AudioBufferUrl, normalize : Basics.Bool }"]],["Delay",["{ delayTime : WebAudio.AudioParam, maxDelayTime : WebAudio.AudioParam }"]],["DynamicsCompressor",["WebAudio.DynamicsCompressorProps"]],["Gain",["{ gain : WebAudio.AudioParam }"]],["MediaElementSource",["{ mediaElement : WebAudio.MediaElementId }"]],["MediaStreamDestination",[]],["Oscillator",["{ frequency : WebAudio.AudioParam, startTime : WebAudio.AudioTime, stopTime : WebAudio.AudioTime }"]],["Panner",["{ coneInnerAngle : Basics.Float, coneOuterAngle : Basics.Float, coneOuterGain : Basics.Float, distanceModel : WebAudio.DistanceModel, orientationX : WebAudio.AudioParam, orientationY : WebAudio.AudioParam, orientationZ : WebAudio.AudioParam, panningModel : WebAudio.PanningModel, positionX : WebAudio.AudioParam, positionY : WebAudio.AudioParam, positionZ : WebAudio.AudioParam, maxDistance : Basics.Float, refDistance : Basics.Float, rolloffFactor : Basics.Float }"]],["StereoPanner",["{ pan : WebAudio.AudioParam }"]],["WaveShaper",["{ curve : WebAudio.Float32Array, oversample : WebAudio.Oversample }"]]]},{"name":"AudioOutput","comment":" Audio output.\n","args":[],"cases":[["Output",["WebAudio.AudioNodeId"]],["Outputs",["List.List WebAudio.AudioNodeId"]],["KeyWithDestination",["{ key : WebAudio.AudioNodeId, destination : WebAudio.Destination }"]]]},{"name":"AudioParam","comment":" AudioParam.\n","args":[],"cases":[["Constant",["Basics.Float"]],["Methods",["List.List WebAudio.AudioParamMethod"]]]},{"name":"AudioParamMethod","comment":" ","args":[],"cases":[["SetValueAtTime",["Basics.Float","WebAudio.AudioTime"]],["LinearRampToValueAtTime",["Basics.Float","WebAudio.AudioTime"]],["ExponentialRampToValueAtTime",["Basics.Float","WebAudio.AudioTime"]],["SetTargetAtTime",["Basics.Float","WebAudio.AudioTime","Basics.Float"]],["SetValueCurveAtTime",["List.List Basics.Float","WebAudio.AudioTime","Basics.Float"]]]},{"name":"AudioTime","comment":" Float value representing audio time.\n","args":[],"cases":[["AudioTime",["Basics.Float"]]]},{"name":"Oversample","comment":" ","args":[],"cases":[["OversampleNone",[]],["Oversample2x",[]],["Oversample4x",[]]]}],"aliases":[{"name":"AudioGraph","comment":" Audio graph.\n","args":[],"type":"List.List WebAudio.AudioNode"},{"name":"AudioNode","comment":" Audio node.\n","args":[],"type":"{ id : WebAudio.AudioNodeId, output : WebAudio.AudioOutput, properties : WebAudio.AudioNodeProps }"},{"name":"DynamicsCompressorProps","comment":" Data type for DynamicsCompresor.\n","args":[],"type":"{ attack : WebAudio.AudioParam, knee : WebAudio.AudioParam, ratio : WebAudio.AudioParam, release : WebAudio.AudioParam, threshold : WebAudio.AudioParam }"},{"name":"Float32Array","comment":" ","args":[],"type":"List.List Basics.Float"}],"values":[{"name":"dynamicsCompressor","comment":" Utility constructor for a DynaicCompressor.\n","type":"(WebAudio.DynamicsCompressorProps -> WebAudio.DynamicsCompressorProps) -> WebAudio.AudioNodeProps"},{"name":"dynamicsCompressorDefaults","comment":" ","type":"WebAudio.DynamicsCompressorProps"},{"name":"output","comment":" Special identifier representing final destination.\n","type":"WebAudio.AudioOutput"},{"name":"toHtml","comment":" Render an audio graph as HTML.\n","type":"{ graph : WebAudio.AudioGraph, assets : List.List String.String, onTick : Basics.Float -> msg, onInstrumentLoaded : List.List String.String -> msg } -> Html.Html msg"}],"binops":[]}]